/*
 * (C) Copyright IBM Corp. 2023.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

package com.ibm.cloud.container_registry.vulnerability_advisor.v4;

import com.ibm.cloud.container_registry.test.SdkIntegrationTestBase;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.AccountReportQueryPathOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.AccountStatusQueryPathOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.CreateExemptionAccountOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.CreateExemptionResourceOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.DeleteExemptionAccountOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.DeleteExemptionResourceOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ExemptHandlerOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.Exemption;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ExemptionDeletionInfo;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ExemptionScope;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ExemptionTypeInfo;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ExemptionsAccountDeleteHandlerOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.GetExemptionAccountOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.GetExemptionResourceOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ImageReportQueryPathOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ImageStatusQueryPathOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ListAccountExemptionsOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ListBulkImageExemptionsOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ListExemptionAccountOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ListExemptionResourceOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ListImageExemptionsOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ScanReport;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ScanReportList;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ScanReportOsDistribution;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ScanreportImageSummary;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ScanreportImageSummaryList;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ScanreportSummary;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ScanresultCVE;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ScanresultConfigurationIssue;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ScanresultPackageFixes;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ScanresultSecurityNotice;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.utils.TestUtilities;
import com.ibm.cloud.sdk.core.http.Response;
import com.ibm.cloud.sdk.core.service.exception.ServiceResponseException;
import com.ibm.cloud.sdk.core.service.model.FileWithMetadata;
import com.ibm.cloud.sdk.core.util.CredentialUtils;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import static org.testng.Assert.*;

/**
 * Integration test class for the VulnerabilityAdvisor service.
 */
public class VulnerabilityAdvisorIT extends SdkIntegrationTestBase {
  public VulnerabilityAdvisor service = null;
  public static Map<String, String> config = null;
  final HashMap<String, InputStream> mockStreamMap = TestUtilities.createMockStreamMap();
  final List<FileWithMetadata> mockListFileWithMetadata = TestUtilities.creatMockListFileWithMetadata();

  // Global variables to hold required parameters for running the unit tests
  String account = "accountID";
  String seedImage = null;
  String cfgNamespace = null;
  String dnsName = null;
  /**
   * This method provides our config filename to the base class.
   */

  public String getConfigFilename() {
    return "../../vulnerability_advisor_v4.env";
  }

  @BeforeClass
  public void constructService() {
    // Ask super if we should skip the tests.
    if (skipTests()) {
      return;
    }

    service = VulnerabilityAdvisor.newInstance(account);
    assertNotNull(service);
    assertNotNull(service.getServiceUrl());

    // Load up our test-specific config properties.
    config = CredentialUtils.getServiceProperties(VulnerabilityAdvisor.DEFAULT_SERVICE_NAME);
    assertNotNull(config);
    assertFalse(config.isEmpty());
    assertEquals(service.getServiceUrl(), config.get("URL"));

    service.enableRetries(4, 30);

    System.out.println("Setup complete.");
  }

  @Test
  public void testAccountReportQueryPath() throws Exception {
    try {
      AccountReportQueryPathOptions accountReportQueryPathOptions = new AccountReportQueryPathOptions.Builder()
        .repository("imageID")
        .includeIbm("false")
        .includePrivate("true")
        .build();

      // Invoke operation
      Response<ScanReportList> response = service.accountReportQueryPath(accountReportQueryPathOptions).execute();
      // Validate response
      assertNotNull(response);
      assertEquals(response.getStatusCode(), 200);

      ScanReportList scanReportListResult = response.getResult();

      assertNotNull(scanReportListResult);
    } catch (ServiceResponseException e) {
        fail(String.format("Service returned status code %d: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()));
    }
  }

  @Test(dependsOnMethods = { "testAccountReportQueryPath" })
  public void testAccountStatusQueryPath() throws Exception {
    try {
      AccountStatusQueryPathOptions accountStatusQueryPathOptions = new AccountStatusQueryPathOptions.Builder()
        .repository("imageID")
        .includeIbm("false")
        .includePrivate("true")
        .build();

      // Invoke operation
      Response<ScanreportImageSummaryList> response = service.accountStatusQueryPath(accountStatusQueryPathOptions).execute();
      // Validate response
      assertNotNull(response);
      assertEquals(response.getStatusCode(), 200);

      ScanreportImageSummaryList scanreportImageSummaryListResult = response.getResult();

      assertNotNull(scanreportImageSummaryListResult);
    } catch (ServiceResponseException e) {
        fail(String.format("Service returned status code %d: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()));
    }
  }

  @Test(dependsOnMethods = { "testAccountStatusQueryPath" })
  public void testImageReportQueryPath() throws Exception {
    try {
      ImageReportQueryPathOptions imageReportQueryPathOptions = new ImageReportQueryPathOptions.Builder()
        .name(dnsName + "/" + seedImage)
        .build();

      // Invoke operation
      Response<ScanReport> response = service.imageReportQueryPath(imageReportQueryPathOptions).execute();
      // Validate response
      assertNotNull(response);
      assertEquals(response.getStatusCode(), 200);

      ScanReport scanReportResult = response.getResult();

      assertNotNull(scanReportResult);
    } catch (ServiceResponseException e) {
        fail(String.format("Service returned status code %d: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()));
    }
  }

  @Test(dependsOnMethods = { "testImageReportQueryPath" })
  public void testImageStatusQueryPath() throws Exception {
    try {
      ImageStatusQueryPathOptions imageStatusQueryPathOptions = new ImageStatusQueryPathOptions.Builder()
        .name(dnsName + "/" + seedImage)
        .build();

      // Invoke operation
      Response<ScanreportSummary> response = service.imageStatusQueryPath(imageStatusQueryPathOptions).execute();
      // Validate response
      assertNotNull(response);
      assertEquals(response.getStatusCode(), 200);

      ScanreportSummary scanreportSummaryResult = response.getResult();

      assertNotNull(scanreportSummaryResult);
    } catch (ServiceResponseException e) {
        fail(String.format("Service returned status code %d: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()));
    }
  }

  @Test(dependsOnMethods = { "testImageStatusQueryPath" })
  public void testListExemptionAccount() throws Exception {
    try {
      ListExemptionAccountOptions listExemptionAccountOptions = new ListExemptionAccountOptions();

      // Invoke operation
      Response<List<Exemption>> response = service.listExemptionAccount(listExemptionAccountOptions).execute();
      // Validate response
      assertNotNull(response);
      assertEquals(response.getStatusCode(), 200);

      List<Exemption> listExemptionResult = response.getResult();

      assertNotNull(listExemptionResult);
    } catch (ServiceResponseException e) {
        fail(String.format("Service returned status code %d: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()));
    }
  }

  @Test(dependsOnMethods = { "testListExemptionAccount" })
  public void testGetExemptionAccount() throws Exception {
    try {
      GetExemptionAccountOptions getExemptionAccountOptions = new GetExemptionAccountOptions.Builder()
        .issueType("cve")
        .issueId("CVE-2023-0001")
        .build();

      // Invoke operation
      Response<Exemption> response = service.getExemptionAccount(getExemptionAccountOptions).execute();
      // Validate response
      assertNotNull(response);
      assertEquals(response.getStatusCode(), 200);

      Exemption exemptionResult = response.getResult();

      assertNotNull(exemptionResult);
    } catch (ServiceResponseException e) {
        fail(String.format("Service returned status code %d: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()));
    }
  }

  @Test(dependsOnMethods = { "testGetExemptionAccount" })
  public void testCreateExemptionAccount() throws Exception {
    try {
      CreateExemptionAccountOptions createExemptionAccountOptions = new CreateExemptionAccountOptions.Builder()
        .issueType("cve")
        .issueId("CVE-2023-0001")
        .build();

      // Invoke operation
      Response<Exemption> response = service.createExemptionAccount(createExemptionAccountOptions).execute();
      // Validate response
      assertNotNull(response);
      assertEquals(response.getStatusCode(), 201);

      Exemption exemptionResult = response.getResult();

      assertNotNull(exemptionResult);
    } catch (ServiceResponseException e) {
        fail(String.format("Service returned status code %d: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()));
    }
  }

  @Test(dependsOnMethods = { "testCreateExemptionAccount" })
  public void testListExemptionResource() throws Exception {
    try {
      ListExemptionResourceOptions listExemptionResourceOptions = new ListExemptionResourceOptions.Builder()
        .resource(dnsName + "/" + seedImage)
        .build();

      // Invoke operation
      Response<List<Exemption>> response = service.listExemptionResource(listExemptionResourceOptions).execute();
      // Validate response
      assertNotNull(response);
      assertEquals(response.getStatusCode(), 200);

      List<Exemption> listExemptionResult = response.getResult();

      assertNotNull(listExemptionResult);
    } catch (ServiceResponseException e) {
        fail(String.format("Service returned status code %d: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()));
    }
  }

  @Test(dependsOnMethods = { "testListExemptionResource" })
  public void testGetExemptionResource() throws Exception {
    try {
      GetExemptionResourceOptions getExemptionResourceOptions = new GetExemptionResourceOptions.Builder()
        .resource(dnsName + "/" + seedImage)
        .issueType("cve")
        .issueId("CVE-2023-0001")
        .build();

      // Invoke operation
      Response<Exemption> response = service.getExemptionResource(getExemptionResourceOptions).execute();
      // Validate response
      assertNotNull(response);
      assertEquals(response.getStatusCode(), 200);

      Exemption exemptionResult = response.getResult();

      assertNotNull(exemptionResult);
    } catch (ServiceResponseException e) {
        fail(String.format("Service returned status code %d: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()));
    }
  }

  @Test(dependsOnMethods = { "testGetExemptionResource" })
  public void testCreateExemptionResource() throws Exception {
    try {
      CreateExemptionResourceOptions createExemptionResourceOptions = new CreateExemptionResourceOptions.Builder()
        .resource(dnsName + "/" + seedImage)
        .issueType("cve")
        .issueId("CVE-2023-0001")
        .build();

      // Invoke operation
      Response<Exemption> response = service.createExemptionResource(createExemptionResourceOptions).execute();
      // Validate response
      assertNotNull(response);
      assertEquals(response.getStatusCode(), 201);

      Exemption exemptionResult = response.getResult();

      assertNotNull(exemptionResult);
    } catch (ServiceResponseException e) {
        fail(String.format("Service returned status code %d: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()));
    }
  }

  @Test(dependsOnMethods = { "testCreateExemptionResource" })
  public void testExemptHandler() throws Exception {
    try {
      ExemptHandlerOptions exemptHandlerOptions = new ExemptHandlerOptions();

      // Invoke operation
      Response<List<ExemptionTypeInfo>> response = service.exemptHandler(exemptHandlerOptions).execute();
      // Validate response
      assertNotNull(response);
      assertEquals(response.getStatusCode(), 200);

      List<ExemptionTypeInfo> listExemptionTypeInfoResult = response.getResult();

      assertNotNull(listExemptionTypeInfoResult);
    } catch (ServiceResponseException e) {
        fail(String.format("Service returned status code %d: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()));
    }
  }

  @Test(dependsOnMethods = { "testExemptHandler" })
  public void testListAccountExemptions() throws Exception {
    try {
      ListAccountExemptionsOptions listAccountExemptionsOptions = new ListAccountExemptionsOptions();

      // Invoke operation
      Response<List<Exemption>> response = service.listAccountExemptions(listAccountExemptionsOptions).execute();
      // Validate response
      assertNotNull(response);
      assertEquals(response.getStatusCode(), 200);

      List<Exemption> listExemptionResult = response.getResult();

      assertNotNull(listExemptionResult);
    } catch (ServiceResponseException e) {
        fail(String.format("Service returned status code %d: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()));
    }
  }

  @Test(dependsOnMethods = { "testListAccountExemptions" })
  public void testExemptionsAccountDeleteHandler() throws Exception {
    try {
      ExemptionsAccountDeleteHandlerOptions exemptionsAccountDeleteHandlerOptions = new ExemptionsAccountDeleteHandlerOptions();

      // Invoke operation
      Response<ExemptionDeletionInfo> response = service.exemptionsAccountDeleteHandler(exemptionsAccountDeleteHandlerOptions).execute();
      // Validate response
      assertNotNull(response);
      assertEquals(response.getStatusCode(), 200);

      ExemptionDeletionInfo exemptionDeletionInfoResult = response.getResult();

      assertNotNull(exemptionDeletionInfoResult);
    } catch (ServiceResponseException e) {
        fail(String.format("Service returned status code %d: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()));
    }
  }

  @Test(dependsOnMethods = { "testExemptionsAccountDeleteHandler" })
  public void testListImageExemptions() throws Exception {
    try {
      ListImageExemptionsOptions listImageExemptionsOptions = new ListImageExemptionsOptions.Builder()
        .resource(dnsName + "/" + seedImage)
        .includeScope(false)
        .build();

      // Invoke operation
      Response<List<Exemption>> response = service.listImageExemptions(listImageExemptionsOptions).execute();
      // Validate response
      assertNotNull(response);
      assertEquals(response.getStatusCode(), 200);

      List<Exemption> listExemptionResult = response.getResult();

      assertNotNull(listExemptionResult);
    } catch (ServiceResponseException e) {
        fail(String.format("Service returned status code %d: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()));
    }
  }

  @Test(dependsOnMethods = { "testListImageExemptions" })
  public void testListBulkImageExemptions() throws Exception {
    try {
      ListBulkImageExemptionsOptions listBulkImageExemptionsOptions = new ListBulkImageExemptionsOptions.Builder()
        .body(java.util.Arrays.asList("us.icr.io/birds/woodpecker:green", "us.icr.io/birds/grebe:crested"))
        .build();

      // Invoke operation
      Response<Map<String, List<Exemption>>> response = service.listBulkImageExemptions(listBulkImageExemptionsOptions).execute();
      // Validate response
      assertNotNull(response);
      assertEquals(response.getStatusCode(), 200);

      Map<String, List<Exemption>> mapStringListExemptionResult = response.getResult();

      assertNotNull(mapStringListExemptionResult);
    } catch (ServiceResponseException e) {
        fail(String.format("Service returned status code %d: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()));
    }
  }

  @Test(dependsOnMethods = { "testListBulkImageExemptions" })
  public void testDeleteExemptionAccount() throws Exception {
    try {
      DeleteExemptionAccountOptions deleteExemptionAccountOptions = new DeleteExemptionAccountOptions.Builder()
        .issueType("cve")
        .issueId("CVE-2023-0001")
        .build();

      // Invoke operation
      Response<Void> response = service.deleteExemptionAccount(deleteExemptionAccountOptions).execute();
      // Validate response
      assertNotNull(response);
      assertEquals(response.getStatusCode(), 200);
    } catch (ServiceResponseException e) {
        fail(String.format("Service returned status code %d: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()));
    }
  }

  @Test(dependsOnMethods = { "testDeleteExemptionAccount" })
  public void testDeleteExemptionResource() throws Exception {
    try {
      DeleteExemptionResourceOptions deleteExemptionResourceOptions = new DeleteExemptionResourceOptions.Builder()
        .resource(dnsName + "/" + seedImage)
        .issueType("cve")
        .issueId("CVE-2023-0001")
        .build();

      // Invoke operation
      Response<Void> response = service.deleteExemptionResource(deleteExemptionResourceOptions).execute();
      // Validate response
      assertNotNull(response);
      assertEquals(response.getStatusCode(), 200);
    } catch (ServiceResponseException e) {
        fail(String.format("Service returned status code %d: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()));
    }
  }

  @AfterClass
  public void tearDown() {
    // Add any clean up logic here
    System.out.println("Clean up complete.");
  }
 }
