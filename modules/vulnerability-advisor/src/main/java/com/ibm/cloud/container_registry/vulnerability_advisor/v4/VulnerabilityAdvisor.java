/*
 * (C) Copyright IBM Corp. 2023.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

/*
 * IBM OpenAPI SDK Code Generator Version: 3.73.0-eeee85a9-20230607-165104
 */

package com.ibm.cloud.container_registry.vulnerability_advisor.v4;

import com.ibm.cloud.container_registry.common.SdkCommon;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.AccountReportQueryPathOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.AccountStatusQueryPathOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.CreateExemptionAccountOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.CreateExemptionResourceOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.DeleteExemptionAccountOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.DeleteExemptionResourceOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ExemptHandlerOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.Exemption;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ExemptionDeletionInfo;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ExemptionTypeInfo;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ExemptionsAccountDeleteHandlerOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.GetExemptionAccountOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.GetExemptionResourceOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ImageReportQueryPathOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ImageStatusQueryPathOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ListAccountExemptionsOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ListBulkImageExemptionsOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ListExemptionAccountOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ListExemptionResourceOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ListImageExemptionsOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ScanReport;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ScanReportList;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ScanreportImageSummaryList;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ScanreportSummary;
import com.ibm.cloud.sdk.core.http.RequestBuilder;
import com.ibm.cloud.sdk.core.http.ResponseConverter;
import com.ibm.cloud.sdk.core.http.ServiceCall;
import com.ibm.cloud.sdk.core.security.Authenticator;
import com.ibm.cloud.sdk.core.security.ConfigBasedAuthenticatorFactory;
import com.ibm.cloud.sdk.core.service.BaseService;
import com.ibm.cloud.sdk.core.util.ResponseConverterUtils;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

/**
 * Management interface of Vulnerability Advisor for IBM Cloud Container Registry.
 *
 * API Version: 4.0.0
 */
public class VulnerabilityAdvisor extends BaseService {

  /**
   * Default service name used when configuring the `VulnerabilityAdvisor` client.
   */
  public static final String DEFAULT_SERVICE_NAME = "vulnerability_advisor";

  /**
   * Default service endpoint URL.
   */
  public static final String DEFAULT_SERVICE_URL = "https://icr.io";

  private static final Map<String, String> _regionalEndpoints;
  static {
    Map<String, String> m = new HashMap<>();
    m.put("global", "https://icr.io"); // global

    m.put("us-south", "https://us.icr.io"); // us-south

    m.put("uk-south", "https://uk.icr.io"); // uk-south

    m.put("eu-gb", "https://uk.icr.io"); // eu-gb

    m.put("eu-central", "https://de.icr.io"); // eu-central

    m.put("eu-de", "https://de.icr.io"); // eu-de

    m.put("ap-north", "https://jp.icr.io"); // ap-north

    m.put("jp-tok", "https://jp.icr.io"); // jp-tok

    m.put("ap-south", "https://au.icr.io"); // ap-south

    m.put("au-syd", "https://au.icr.io"); // au-syd

    m.put("jp-osa", "https://jp2.icr.io"); // jp-osa

    m.put("ca-tor", "https://ca.icr.io"); // ca-tor

    m.put("br-sao", "https://br.icr.io"); // br-sao
    _regionalEndpoints = Collections.unmodifiableMap(m);
  }

  /**
   * Returns the service URL associated with the specified region.
   * @param region a string representing the region
   * @return the service URL associated with the specified region or null
   * if no mapping for the region exists
   */
  public static String getServiceUrlForRegion(String region) {
    return _regionalEndpoints.get(region);
  }

  private String acceptLanguage;

  private String account;

 /**
   * Class method which constructs an instance of the `VulnerabilityAdvisor` client.
   * The default service name is used to configure the client instance.
   *
   * @param account The unique ID for your IBM Cloud account. Run 'ibmcloud cr info' to get the ID of the target account.
   * @return an instance of the `VulnerabilityAdvisor` client using external configuration
   */
  public static VulnerabilityAdvisor newInstance(String account) {
    return newInstance(account, DEFAULT_SERVICE_NAME);
  }

  /**
   * Class method which constructs an instance of the `VulnerabilityAdvisor` client.
   * The specified service name is used to configure the client instance.
   *
   * @param account The unique ID for your IBM Cloud account. Run 'ibmcloud cr info' to get the ID of the target account.
   * @param serviceName the service name to be used when configuring the client instance
   * @return an instance of the `VulnerabilityAdvisor` client using external configuration
   */
  public static VulnerabilityAdvisor newInstance(String account, String serviceName) {
    Authenticator authenticator = ConfigBasedAuthenticatorFactory.getAuthenticator(serviceName);
    VulnerabilityAdvisor service = new VulnerabilityAdvisor(account, serviceName, authenticator);
    service.configureService(serviceName);
    return service;
  }

  /**
   * Constructs an instance of the `VulnerabilityAdvisor` client.
   * The specified service name and authenticator are used to configure the client instance.
   *
   * @param account The unique ID for your IBM Cloud account. Run 'ibmcloud cr info' to get the ID of the target account.
   * @param serviceName the service name to be used when configuring the client instance
   * @param authenticator the {@link Authenticator} instance to be configured for this client
   */
  public VulnerabilityAdvisor(String account, String serviceName, Authenticator authenticator) {
    super(serviceName, authenticator);
    setServiceUrl(DEFAULT_SERVICE_URL);
    setAccount(account);
  }

  /**
   * Gets the acceptLanguage.
   *
   * The preferred language code for this request.
   *
   * @return the acceptLanguage
   */
  public String getAcceptLanguage() {
    return this.acceptLanguage;
  }

  /**
   * Sets the acceptLanguage.
   *
   * @param acceptLanguage the new acceptLanguage
   */
  public void setAcceptLanguage(final String acceptLanguage) {
    this.acceptLanguage = acceptLanguage;
  }

  /**
   * Gets the account.
   *
   * The unique ID for your IBM Cloud account. Run 'ibmcloud cr info' to get the ID of the target account.
   *
   * @return the account
   */
  public String getAccount() {
    return this.account;
  }

  /**
   * Sets the account.
   *
   * @param account the new account
   */
  public void setAccount(final String account) {
    com.ibm.cloud.sdk.core.util.Validator.notEmpty(account, "account cannot be empty.");
    this.account = account;
  }

  /**
   * Get the vulnerability assessment for all images.
   *
   * Get the vulnerability assessment for the list of registry images that belong to a specific account.
   *
   * @param accountReportQueryPathOptions the {@link AccountReportQueryPathOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link ScanReportList}
   */
  public ServiceCall<ScanReportList> accountReportQueryPath(AccountReportQueryPathOptions accountReportQueryPathOptions) {
    if (accountReportQueryPathOptions == null) {
      accountReportQueryPathOptions = new AccountReportQueryPathOptions.Builder().build();
    }
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.resolveRequestUrl(getServiceUrl(), "/va/api/v4/report/account"));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("vulnerability_advisor", "v4", "accountReportQueryPath");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.header("Account", this.account);
    if (this.acceptLanguage != null) {
      builder.header("Accept-Language", this.acceptLanguage);
    }
    if (accountReportQueryPathOptions.repository() != null) {
      builder.query("repository", String.valueOf(accountReportQueryPathOptions.repository()));
    }
    if (accountReportQueryPathOptions.includeIbm() != null) {
      builder.query("includeIBM", String.valueOf(accountReportQueryPathOptions.includeIbm()));
    }
    if (accountReportQueryPathOptions.includePrivate() != null) {
      builder.query("includePrivate", String.valueOf(accountReportQueryPathOptions.includePrivate()));
    }
    ResponseConverter<ScanReportList> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<ScanReportList>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Get the vulnerability assessment for all images.
   *
   * Get the vulnerability assessment for the list of registry images that belong to a specific account.
   *
   * @return a {@link ServiceCall} with a result of type {@link ScanReportList}
   */
  public ServiceCall<ScanReportList> accountReportQueryPath() {
    return accountReportQueryPath(null);
  }

  /**
   * Get vulnerability assessment status for all images.
   *
   * Get the vulnerability assessment status for the list of registry images that belong to a specific account.
   *
   * @param accountStatusQueryPathOptions the {@link AccountStatusQueryPathOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link ScanreportImageSummaryList}
   */
  public ServiceCall<ScanreportImageSummaryList> accountStatusQueryPath(AccountStatusQueryPathOptions accountStatusQueryPathOptions) {
    if (accountStatusQueryPathOptions == null) {
      accountStatusQueryPathOptions = new AccountStatusQueryPathOptions.Builder().build();
    }
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.resolveRequestUrl(getServiceUrl(), "/va/api/v4/report/account/status"));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("vulnerability_advisor", "v4", "accountStatusQueryPath");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.header("Account", this.account);
    if (this.acceptLanguage != null) {
      builder.header("Accept-Language", this.acceptLanguage);
    }
    if (accountStatusQueryPathOptions.repository() != null) {
      builder.query("repository", String.valueOf(accountStatusQueryPathOptions.repository()));
    }
    if (accountStatusQueryPathOptions.includeIbm() != null) {
      builder.query("includeIBM", String.valueOf(accountStatusQueryPathOptions.includeIbm()));
    }
    if (accountStatusQueryPathOptions.includePrivate() != null) {
      builder.query("includePrivate", String.valueOf(accountStatusQueryPathOptions.includePrivate()));
    }
    ResponseConverter<ScanreportImageSummaryList> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<ScanreportImageSummaryList>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Get vulnerability assessment status for all images.
   *
   * Get the vulnerability assessment status for the list of registry images that belong to a specific account.
   *
   * @return a {@link ServiceCall} with a result of type {@link ScanreportImageSummaryList}
   */
  public ServiceCall<ScanreportImageSummaryList> accountStatusQueryPath() {
    return accountStatusQueryPath(null);
  }

  /**
   * Get vulnerability assessment.
   *
   * Get the vulnerability assessment for a registry image.
   *
   * @param imageReportQueryPathOptions the {@link ImageReportQueryPathOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link ScanReport}
   */
  public ServiceCall<ScanReport> imageReportQueryPath(ImageReportQueryPathOptions imageReportQueryPathOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(imageReportQueryPathOptions,
      "imageReportQueryPathOptions cannot be null");
    Map<String, String> pathParamsMap = new HashMap<String, String>();
    pathParamsMap.put("name", imageReportQueryPathOptions.name());
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.resolveRequestUrl(getServiceUrl(), "/va/api/v4/report/image/{name}", pathParamsMap));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("vulnerability_advisor", "v4", "imageReportQueryPath");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.header("Account", this.account);
    if (this.acceptLanguage != null) {
      builder.header("Accept-Language", this.acceptLanguage);
    }
    ResponseConverter<ScanReport> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<ScanReport>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Get vulnerability assessment status.
   *
   * Get the overall vulnerability status for a registry image.
   *
   * @param imageStatusQueryPathOptions the {@link ImageStatusQueryPathOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link ScanreportSummary}
   */
  public ServiceCall<ScanreportSummary> imageStatusQueryPath(ImageStatusQueryPathOptions imageStatusQueryPathOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(imageStatusQueryPathOptions,
      "imageStatusQueryPathOptions cannot be null");
    Map<String, String> pathParamsMap = new HashMap<String, String>();
    pathParamsMap.put("name", imageStatusQueryPathOptions.name());
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.resolveRequestUrl(getServiceUrl(), "/va/api/v4/report/image/status/{name}", pathParamsMap));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("vulnerability_advisor", "v4", "imageStatusQueryPath");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.header("Account", this.account);
    if (this.acceptLanguage != null) {
      builder.header("Accept-Language", this.acceptLanguage);
    }
    ResponseConverter<ScanreportSummary> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<ScanreportSummary>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * List account level exemptions.
   *
   * List the exemptions that are specified with account level scope.
   *
   * @param listExemptionAccountOptions the {@link ListExemptionAccountOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link List}
   */
  public ServiceCall<List<Exemption>> listExemptionAccount(ListExemptionAccountOptions listExemptionAccountOptions) {
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.resolveRequestUrl(getServiceUrl(), "/va/api/v4/exempt/image"));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("vulnerability_advisor", "v4", "listExemptionAccount");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.header("Account", this.account);
    if (this.acceptLanguage != null) {
      builder.header("Accept-Language", this.acceptLanguage);
    }
    ResponseConverter<List<Exemption>> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<List<Exemption>>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * List account level exemptions.
   *
   * List the exemptions that are specified with account level scope.
   *
   * @return a {@link ServiceCall} with a result of type {@link List}
   */
  public ServiceCall<List<Exemption>> listExemptionAccount() {
    return listExemptionAccount(null);
  }

  /**
   * Get an account level exemption.
   *
   * Get details of an exemption that is specified with account level scope.
   *
   * @param getExemptionAccountOptions the {@link GetExemptionAccountOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link Exemption}
   */
  public ServiceCall<Exemption> getExemptionAccount(GetExemptionAccountOptions getExemptionAccountOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(getExemptionAccountOptions,
      "getExemptionAccountOptions cannot be null");
    Map<String, String> pathParamsMap = new HashMap<String, String>();
    pathParamsMap.put("issueType", getExemptionAccountOptions.issueType());
    pathParamsMap.put("issueID", getExemptionAccountOptions.issueId());
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.resolveRequestUrl(getServiceUrl(), "/va/api/v4/exempt/image/issue/{issueType}/{issueID}", pathParamsMap));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("vulnerability_advisor", "v4", "getExemptionAccount");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.header("Account", this.account);
    if (this.acceptLanguage != null) {
      builder.header("Accept-Language", this.acceptLanguage);
    }
    ResponseConverter<Exemption> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<Exemption>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Create or update an account level exemption.
   *
   * Create or update an exemption that is specified with account level scope.
   *
   * @param createExemptionAccountOptions the {@link CreateExemptionAccountOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link Exemption}
   */
  public ServiceCall<Exemption> createExemptionAccount(CreateExemptionAccountOptions createExemptionAccountOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(createExemptionAccountOptions,
      "createExemptionAccountOptions cannot be null");
    Map<String, String> pathParamsMap = new HashMap<String, String>();
    pathParamsMap.put("issueType", createExemptionAccountOptions.issueType());
    pathParamsMap.put("issueID", createExemptionAccountOptions.issueId());
    RequestBuilder builder = RequestBuilder.post(RequestBuilder.resolveRequestUrl(getServiceUrl(), "/va/api/v4/exempt/image/issue/{issueType}/{issueID}", pathParamsMap));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("vulnerability_advisor", "v4", "createExemptionAccount");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.header("Account", this.account);
    if (this.acceptLanguage != null) {
      builder.header("Accept-Language", this.acceptLanguage);
    }
    ResponseConverter<Exemption> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<Exemption>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Delete an account level exemption.
   *
   * Delete an exemption that is specified with account level scope.
   *
   * @param deleteExemptionAccountOptions the {@link DeleteExemptionAccountOptions} containing the options for the call
   * @return a {@link ServiceCall} with a void result
   */
  public ServiceCall<Void> deleteExemptionAccount(DeleteExemptionAccountOptions deleteExemptionAccountOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(deleteExemptionAccountOptions,
      "deleteExemptionAccountOptions cannot be null");
    Map<String, String> pathParamsMap = new HashMap<String, String>();
    pathParamsMap.put("issueType", deleteExemptionAccountOptions.issueType());
    pathParamsMap.put("issueID", deleteExemptionAccountOptions.issueId());
    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.resolveRequestUrl(getServiceUrl(), "/va/api/v4/exempt/image/issue/{issueType}/{issueID}", pathParamsMap));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("vulnerability_advisor", "v4", "deleteExemptionAccount");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Account", this.account);
    if (this.acceptLanguage != null) {
      builder.header("Accept-Language", this.acceptLanguage);
    }
    ResponseConverter<Void> responseConverter = ResponseConverterUtils.getVoid();
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * List resource exemptions.
   *
   * List the exemptions that are specified for a resource (account, registry namespace, repository, or image).
   *
   * @param listExemptionResourceOptions the {@link ListExemptionResourceOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link List}
   */
  public ServiceCall<List<Exemption>> listExemptionResource(ListExemptionResourceOptions listExemptionResourceOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(listExemptionResourceOptions,
      "listExemptionResourceOptions cannot be null");
    Map<String, String> pathParamsMap = new HashMap<String, String>();
    pathParamsMap.put("resource", listExemptionResourceOptions.resource());
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.resolveRequestUrl(getServiceUrl(), "/va/api/v4/exempt/image/{resource}", pathParamsMap));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("vulnerability_advisor", "v4", "listExemptionResource");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.header("Account", this.account);
    if (this.acceptLanguage != null) {
      builder.header("Accept-Language", this.acceptLanguage);
    }
    ResponseConverter<List<Exemption>> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<List<Exemption>>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Get details of a resource exemption.
   *
   * Get an exemption that is specified for a resource (account, registry namespace, repository, or image).
   *
   * @param getExemptionResourceOptions the {@link GetExemptionResourceOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link Exemption}
   */
  public ServiceCall<Exemption> getExemptionResource(GetExemptionResourceOptions getExemptionResourceOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(getExemptionResourceOptions,
      "getExemptionResourceOptions cannot be null");
    Map<String, String> pathParamsMap = new HashMap<String, String>();
    pathParamsMap.put("resource", getExemptionResourceOptions.resource());
    pathParamsMap.put("issueType", getExemptionResourceOptions.issueType());
    pathParamsMap.put("issueID", getExemptionResourceOptions.issueId());
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.resolveRequestUrl(getServiceUrl(), "/va/api/v4/exempt/image/{resource}/issue/{issueType}/{issueID}", pathParamsMap));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("vulnerability_advisor", "v4", "getExemptionResource");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.header("Account", this.account);
    if (this.acceptLanguage != null) {
      builder.header("Accept-Language", this.acceptLanguage);
    }
    ResponseConverter<Exemption> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<Exemption>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Create or update a resource exemption.
   *
   * Create or update an exemption that is specified for a resource (account, registry namespace, repository, or image).
   *
   * @param createExemptionResourceOptions the {@link CreateExemptionResourceOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link Exemption}
   */
  public ServiceCall<Exemption> createExemptionResource(CreateExemptionResourceOptions createExemptionResourceOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(createExemptionResourceOptions,
      "createExemptionResourceOptions cannot be null");
    Map<String, String> pathParamsMap = new HashMap<String, String>();
    pathParamsMap.put("resource", createExemptionResourceOptions.resource());
    pathParamsMap.put("issueType", createExemptionResourceOptions.issueType());
    pathParamsMap.put("issueID", createExemptionResourceOptions.issueId());
    RequestBuilder builder = RequestBuilder.post(RequestBuilder.resolveRequestUrl(getServiceUrl(), "/va/api/v4/exempt/image/{resource}/issue/{issueType}/{issueID}", pathParamsMap));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("vulnerability_advisor", "v4", "createExemptionResource");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.header("Account", this.account);
    if (this.acceptLanguage != null) {
      builder.header("Accept-Language", this.acceptLanguage);
    }
    ResponseConverter<Exemption> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<Exemption>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Delete a resource exemption.
   *
   * Delete an exemption that is specified for a resource (account, registry namespace, repository, or image).
   *
   * @param deleteExemptionResourceOptions the {@link DeleteExemptionResourceOptions} containing the options for the call
   * @return a {@link ServiceCall} with a void result
   */
  public ServiceCall<Void> deleteExemptionResource(DeleteExemptionResourceOptions deleteExemptionResourceOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(deleteExemptionResourceOptions,
      "deleteExemptionResourceOptions cannot be null");
    Map<String, String> pathParamsMap = new HashMap<String, String>();
    pathParamsMap.put("resource", deleteExemptionResourceOptions.resource());
    pathParamsMap.put("issueType", deleteExemptionResourceOptions.issueType());
    pathParamsMap.put("issueID", deleteExemptionResourceOptions.issueId());
    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.resolveRequestUrl(getServiceUrl(), "/va/api/v4/exempt/image/{resource}/issue/{issueType}/{issueID}", pathParamsMap));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("vulnerability_advisor", "v4", "deleteExemptionResource");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Account", this.account);
    if (this.acceptLanguage != null) {
      builder.header("Accept-Language", this.acceptLanguage);
    }
    ResponseConverter<Void> responseConverter = ResponseConverterUtils.getVoid();
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * List the types of exemption.
   *
   * List the types of exemption.
   *
   * @param exemptHandlerOptions the {@link ExemptHandlerOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link List}
   */
  public ServiceCall<List<ExemptionTypeInfo>> exemptHandler(ExemptHandlerOptions exemptHandlerOptions) {
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.resolveRequestUrl(getServiceUrl(), "/va/api/v4/exempt/types"));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("vulnerability_advisor", "v4", "exemptHandler");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.header("Account", this.account);
    if (this.acceptLanguage != null) {
      builder.header("Accept-Language", this.acceptLanguage);
    }
    ResponseConverter<List<ExemptionTypeInfo>> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<List<ExemptionTypeInfo>>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * List the types of exemption.
   *
   * List the types of exemption.
   *
   * @return a {@link ServiceCall} with a result of type {@link List}
   */
  public ServiceCall<List<ExemptionTypeInfo>> exemptHandler() {
    return exemptHandler(null);
  }

  /**
   * List all exemptions.
   *
   * List all of the exemptions in the given account.
   *
   * @param listAccountExemptionsOptions the {@link ListAccountExemptionsOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link List}
   */
  public ServiceCall<List<Exemption>> listAccountExemptions(ListAccountExemptionsOptions listAccountExemptionsOptions) {
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.resolveRequestUrl(getServiceUrl(), "/va/api/v4/exemptions/account"));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("vulnerability_advisor", "v4", "listAccountExemptions");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.header("Account", this.account);
    if (this.acceptLanguage != null) {
      builder.header("Accept-Language", this.acceptLanguage);
    }
    ResponseConverter<List<Exemption>> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<List<Exemption>>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * List all exemptions.
   *
   * List all of the exemptions in the given account.
   *
   * @return a {@link ServiceCall} with a result of type {@link List}
   */
  public ServiceCall<List<Exemption>> listAccountExemptions() {
    return listAccountExemptions(null);
  }

  /**
   * Delete all exemptions.
   *
   * Delete all of the exemptions in the given account.
   *
   * @param exemptionsAccountDeleteHandlerOptions the {@link ExemptionsAccountDeleteHandlerOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link ExemptionDeletionInfo}
   */
  public ServiceCall<ExemptionDeletionInfo> exemptionsAccountDeleteHandler(ExemptionsAccountDeleteHandlerOptions exemptionsAccountDeleteHandlerOptions) {
    RequestBuilder builder = RequestBuilder.post(RequestBuilder.resolveRequestUrl(getServiceUrl(), "/va/api/v4/exemptions/deleteAll"));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("vulnerability_advisor", "v4", "exemptionsAccountDeleteHandler");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.header("Account", this.account);
    if (this.acceptLanguage != null) {
      builder.header("Accept-Language", this.acceptLanguage);
    }
    ResponseConverter<ExemptionDeletionInfo> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<ExemptionDeletionInfo>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Delete all exemptions.
   *
   * Delete all of the exemptions in the given account.
   *
   * @return a {@link ServiceCall} with a result of type {@link ExemptionDeletionInfo}
   */
  public ServiceCall<ExemptionDeletionInfo> exemptionsAccountDeleteHandler() {
    return exemptionsAccountDeleteHandler(null);
  }

  /**
   * List image exemptions.
   *
   * List all of the exemptions for an image.
   *
   * @param listImageExemptionsOptions the {@link ListImageExemptionsOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link List}
   */
  public ServiceCall<List<Exemption>> listImageExemptions(ListImageExemptionsOptions listImageExemptionsOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(listImageExemptionsOptions,
      "listImageExemptionsOptions cannot be null");
    Map<String, String> pathParamsMap = new HashMap<String, String>();
    pathParamsMap.put("resource", listImageExemptionsOptions.resource());
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.resolveRequestUrl(getServiceUrl(), "/va/api/v4/exemptions/image/{resource}", pathParamsMap));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("vulnerability_advisor", "v4", "listImageExemptions");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.header("Account", this.account);
    if (this.acceptLanguage != null) {
      builder.header("Accept-Language", this.acceptLanguage);
    }
    if (listImageExemptionsOptions.includeScope() != null) {
      builder.query("includeScope", String.valueOf(listImageExemptionsOptions.includeScope()));
    }
    ResponseConverter<List<Exemption>> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<List<Exemption>>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * List exemptions for images.
   *
   * List the exemptions for the given list of images.
   *
   * @param listBulkImageExemptionsOptions the {@link ListBulkImageExemptionsOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link Map}
   */
  public ServiceCall<Map<String, List<Exemption>>> listBulkImageExemptions(ListBulkImageExemptionsOptions listBulkImageExemptionsOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(listBulkImageExemptionsOptions,
      "listBulkImageExemptionsOptions cannot be null");
    RequestBuilder builder = RequestBuilder.post(RequestBuilder.resolveRequestUrl(getServiceUrl(), "/va/api/v4/exemptions/images"));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("vulnerability_advisor", "v4", "listBulkImageExemptions");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.header("Account", this.account);
    if (this.acceptLanguage != null) {
      builder.header("Accept-Language", this.acceptLanguage);
    }
    builder.bodyContent(com.ibm.cloud.sdk.core.util.GsonSingleton.getGsonWithoutPrettyPrinting().toJson(listBulkImageExemptionsOptions.body()), "application/json");
    ResponseConverter<Map<String, List<Exemption>>> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<Map<String, List<Exemption>>>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

}
