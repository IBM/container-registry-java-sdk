/*
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
package com.ibm.cloud.container_registry.vulnerability_advisor.v3.model;

import java.util.List;

import com.google.gson.annotations.SerializedName;
import com.ibm.cloud.sdk.core.service.model.GenericModel;

/**
 * ScanresultCVE.
 */
public class ScanresultCVE extends GenericModel {

  @SerializedName("cve_exempt")
  protected Boolean cveExempt;
  @SerializedName("cve_id")
  protected String cveId;
  @SerializedName("exempt_security_notice_count")
  protected Long exemptSecurityNoticeCount;
  @SerializedName("exempt_status")
  protected String exemptStatus;
  @SerializedName("security_notice_count")
  protected Long securityNoticeCount;
  @SerializedName("security_notices")
  protected List<ScanresultSecurityNotice> securityNotices;
  protected String summary;
  @SerializedName("total_security_notice_count")
  protected Long totalSecurityNoticeCount;

  /**
   * Gets the cveExempt.
   *
   * True if this CVE has been exempted by user policy, and false otherwise.
   *
   * @return the cveExempt
   */
  public Boolean isCveExempt() {
    return cveExempt;
  }

  /**
   * Gets the cveId.
   *
   * The ID for this CVE.
   *
   * @return the cveId
   */
  public String getCveId() {
    return cveId;
  }

  /**
   * Gets the exemptSecurityNoticeCount.
   *
   * Number of security notices that contain fixes for this CVE and are exempted by user policy.
   *
   * @return the exemptSecurityNoticeCount
   */
  public Long getExemptSecurityNoticeCount() {
    return exemptSecurityNoticeCount;
  }

  /**
   * Gets the exemptStatus.
   *
   * 'exempt' if this CVE is exempt or all security notices for this CVE are exempt. 'partial' if this CVE is not exempt
   * but a subset of security notices for this CVE are exempt. 'active' if this CVE is not exempt and no security
   * notices for this CVE are exempt.
   *
   * @return the exemptStatus
   */
  public String getExemptStatus() {
    return exemptStatus;
  }

  /**
   * Gets the securityNoticeCount.
   *
   * Number of security notices that contain fixes for this CVE and are not exempted by user policy.
   *
   * @return the securityNoticeCount
   */
  public Long getSecurityNoticeCount() {
    return securityNoticeCount;
  }

  /**
   * Gets the securityNotices.
   *
   * Security notices that contain fixes for this CVE.
   *
   * @return the securityNotices
   */
  public List<ScanresultSecurityNotice> getSecurityNotices() {
    return securityNotices;
  }

  /**
   * Gets the summary.
   *
   * The summary of the security vulnerability for this CVE.
   *
   * @return the summary
   */
  public String getSummary() {
    return summary;
  }

  /**
   * Gets the totalSecurityNoticeCount.
   *
   * Total number of security notices that contain fixes for this CVE.
   *
   * @return the totalSecurityNoticeCount
   */
  public Long getTotalSecurityNoticeCount() {
    return totalSecurityNoticeCount;
  }
}

