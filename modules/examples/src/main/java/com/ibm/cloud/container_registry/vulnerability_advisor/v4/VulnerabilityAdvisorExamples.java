/*
 * (C) Copyright IBM Corp. 2023.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

package com.ibm.cloud.container_registry.vulnerability_advisor.v4;

import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.AccountReportQueryPathOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.AccountStatusQueryPathOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.CreateExemptionAccountOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.CreateExemptionResourceOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.DeleteExemptionAccountOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.DeleteExemptionResourceOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ExemptHandlerOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.Exemption;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ExemptionDeletionInfo;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ExemptionTypeInfo;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ExemptionsAccountDeleteHandlerOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.GetExemptionAccountOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.GetExemptionResourceOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ImageReportQueryPathOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ImageStatusQueryPathOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ListAccountExemptionsOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ListBulkImageExemptionsOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ListExemptionAccountOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ListExemptionResourceOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ListImageExemptionsOptions;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ScanReport;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ScanReportList;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ScanreportImageSummaryList;
import com.ibm.cloud.container_registry.vulnerability_advisor.v4.model.ScanreportSummary;
import com.ibm.cloud.sdk.core.http.Response;
import com.ibm.cloud.sdk.core.service.exception.ServiceResponseException;
import com.ibm.cloud.sdk.core.util.CredentialUtils;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class contains examples of how to use the Vulnerability Advisor service.
 *
 * The following configuration properties are assumed to be defined:
 * VULNERABILITY_ADVISOR_URL=&lt;service base url&gt;
 * VULNERABILITY_ADVISOR_AUTH_TYPE=iam
 * VULNERABILITY_ADVISOR_APIKEY=&lt;IAM apikey&gt;
 * VULNERABILITY_ADVISOR_AUTH_URL=&lt;IAM token service base URL - omit this if using the production environment&gt;
 *
 * These configuration properties can be exported as environment variables, or stored
 * in a configuration file and then:
 * export IBM_CREDENTIALS_FILE=&lt;name of configuration file&gt;
 */
public class VulnerabilityAdvisorExamples {
  private static final Logger logger = LoggerFactory.getLogger(VulnerabilityAdvisorExamples.class);
  protected VulnerabilityAdvisorExamples() { }

  static {
    System.setProperty("IBM_CREDENTIALS_FILE", "../../vulnerability_advisor_v4.env");
  }

  /**
   * The main() function invokes operations of the Vulnerability Advisor service.
   * @param args command-line arguments
   * @throws Exception an error occurred
   */
  @SuppressWarnings("checkstyle:methodlength")
  public static void main(String[] args) throws Exception {
    String account = "accountID";

    VulnerabilityAdvisor vulnerabilityAdvisorService = VulnerabilityAdvisor.newInstance(account);

    // Load up our test-specific config properties.
    Map<String, String> testConfigProperties = CredentialUtils.getServiceProperties(VulnerabilityAdvisor.DEFAULT_SERVICE_NAME);

    try {
      System.out.println("accountReportQueryPath() result:");
      // begin-accountReportQueryPath
      AccountReportQueryPathOptions accountReportQueryPathOptions = new AccountReportQueryPathOptions.Builder()
        .build();

      Response<ScanReportList> response = vulnerabilityAdvisorService.accountReportQueryPath(accountReportQueryPathOptions).execute();
      ScanReportList scanReportList = response.getResult();

      System.out.println(scanReportList);
      // end-accountReportQueryPath
    } catch (ServiceResponseException e) {
        logger.error(String.format("Service returned status code %s: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()), e);
    }

    try {
      System.out.println("accountStatusQueryPath() result:");
      // begin-accountStatusQueryPath
      AccountStatusQueryPathOptions accountStatusQueryPathOptions = new AccountStatusQueryPathOptions.Builder()
        .build();

      Response<ScanreportImageSummaryList> response = vulnerabilityAdvisorService.accountStatusQueryPath(accountStatusQueryPathOptions).execute();
      ScanreportImageSummaryList scanreportImageSummaryList = response.getResult();

      System.out.println(scanreportImageSummaryList);
      // end-accountStatusQueryPath
    } catch (ServiceResponseException e) {
        logger.error(String.format("Service returned status code %s: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()), e);
    }

    try {
      System.out.println("imageReportQueryPath() result:");
      // begin-imageReportQueryPath
      ImageReportQueryPathOptions imageReportQueryPathOptions = new ImageReportQueryPathOptions.Builder()
        .name("image name")
        .build();

      Response<ScanReport> response = vulnerabilityAdvisorService.imageReportQueryPath(imageReportQueryPathOptions).execute();
      ScanReport scanReport = response.getResult();

      System.out.println(scanReport);
      // end-imageReportQueryPath
    } catch (ServiceResponseException e) {
        logger.error(String.format("Service returned status code %s: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()), e);
    }

    try {
      System.out.println("imageStatusQueryPath() result:");
      // begin-imageStatusQueryPath
      ImageStatusQueryPathOptions imageStatusQueryPathOptions = new ImageStatusQueryPathOptions.Builder()
        .name("image name")
        .build();

      Response<ScanreportSummary> response = vulnerabilityAdvisorService.imageStatusQueryPath(imageStatusQueryPathOptions).execute();
      ScanreportSummary scanreportSummary = response.getResult();

      System.out.println(scanreportSummary);
      // end-imageStatusQueryPath
    } catch (ServiceResponseException e) {
        logger.error(String.format("Service returned status code %s: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()), e);
    }

    try {
      System.out.println("listExemptionAccount() result:");
      // begin-listExemptionAccount
      ListExemptionAccountOptions listExemptionAccountOptions = new ListExemptionAccountOptions();

      Response<List<Exemption>> response = vulnerabilityAdvisorService.listExemptionAccount(listExemptionAccountOptions).execute();
      List<Exemption> listExemption = response.getResult();

      System.out.println(listExemption);
      // end-listExemptionAccount
    } catch (ServiceResponseException e) {
        logger.error(String.format("Service returned status code %s: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()), e);
    }

    try {
      System.out.println("getExemptionAccount() result:");
      // begin-getExemptionAccount
      GetExemptionAccountOptions getExemptionAccountOptions = new GetExemptionAccountOptions.Builder()
        .issueType("cve")
        .issueId("CVE-2023-0001")
        .build();

      Response<Exemption> response = vulnerabilityAdvisorService.getExemptionAccount(getExemptionAccountOptions).execute();
      Exemption exemption = response.getResult();

      System.out.println(exemption);
      // end-getExemptionAccount
    } catch (ServiceResponseException e) {
        logger.error(String.format("Service returned status code %s: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()), e);
    }

    try {
      System.out.println("createExemptionAccount() result:");
      // begin-createExemptionAccount
      CreateExemptionAccountOptions createExemptionAccountOptions = new CreateExemptionAccountOptions.Builder()
        .issueType("cve")
        .issueId("CVE-2023-0001")
        .build();

      Response<Exemption> response = vulnerabilityAdvisorService.createExemptionAccount(createExemptionAccountOptions).execute();
      Exemption exemption = response.getResult();

      System.out.println(exemption);
      // end-createExemptionAccount
    } catch (ServiceResponseException e) {
        logger.error(String.format("Service returned status code %s: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()), e);
    }

    try {
      System.out.println("listExemptionResource() result:");
      // begin-listExemptionResource
      ListExemptionResourceOptions listExemptionResourceOptions = new ListExemptionResourceOptions.Builder()
        .resource("image name")
        .build();

      Response<List<Exemption>> response = vulnerabilityAdvisorService.listExemptionResource(listExemptionResourceOptions).execute();
      List<Exemption> listExemption = response.getResult();

      System.out.println(listExemption);
      // end-listExemptionResource
    } catch (ServiceResponseException e) {
        logger.error(String.format("Service returned status code %s: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()), e);
    }

    try {
      System.out.println("getExemptionResource() result:");
      // begin-getExemptionResource
      GetExemptionResourceOptions getExemptionResourceOptions = new GetExemptionResourceOptions.Builder()
        .resource("image name")
        .issueType("cve")
        .issueId("CVE-2023-0001")
        .build();

      Response<Exemption> response = vulnerabilityAdvisorService.getExemptionResource(getExemptionResourceOptions).execute();
      Exemption exemption = response.getResult();

      System.out.println(exemption);
      // end-getExemptionResource
    } catch (ServiceResponseException e) {
        logger.error(String.format("Service returned status code %s: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()), e);
    }

    try {
      System.out.println("createExemptionResource() result:");
      // begin-createExemptionResource
      CreateExemptionResourceOptions createExemptionResourceOptions = new CreateExemptionResourceOptions.Builder()
        .resource("image name")
        .issueType("cve")
        .issueId("CVE-2023-0001")
        .build();

      Response<Exemption> response = vulnerabilityAdvisorService.createExemptionResource(createExemptionResourceOptions).execute();
      Exemption exemption = response.getResult();

      System.out.println(exemption);
      // end-createExemptionResource
    } catch (ServiceResponseException e) {
        logger.error(String.format("Service returned status code %s: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()), e);
    }

    try {
      System.out.println("exemptHandler() result:");
      // begin-exemptHandler
      ExemptHandlerOptions exemptHandlerOptions = new ExemptHandlerOptions();

      Response<List<ExemptionTypeInfo>> response = vulnerabilityAdvisorService.exemptHandler(exemptHandlerOptions).execute();
      List<ExemptionTypeInfo> listExemptionTypeInfo = response.getResult();

      System.out.println(listExemptionTypeInfo);
      // end-exemptHandler
    } catch (ServiceResponseException e) {
        logger.error(String.format("Service returned status code %s: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()), e);
    }

    try {
      System.out.println("listAccountExemptions() result:");
      // begin-listAccountExemptions
      ListAccountExemptionsOptions listAccountExemptionsOptions = new ListAccountExemptionsOptions();

      Response<List<Exemption>> response = vulnerabilityAdvisorService.listAccountExemptions(listAccountExemptionsOptions).execute();
      List<Exemption> listExemption = response.getResult();

      System.out.println(listExemption);
      // end-listAccountExemptions
    } catch (ServiceResponseException e) {
        logger.error(String.format("Service returned status code %s: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()), e);
    }

    try {
      System.out.println("exemptionsAccountDeleteHandler() result:");
      // begin-exemptionsAccountDeleteHandler
      ExemptionsAccountDeleteHandlerOptions exemptionsAccountDeleteHandlerOptions = new ExemptionsAccountDeleteHandlerOptions();

      Response<ExemptionDeletionInfo> response = vulnerabilityAdvisorService.exemptionsAccountDeleteHandler(exemptionsAccountDeleteHandlerOptions).execute();
      ExemptionDeletionInfo exemptionDeletionInfo = response.getResult();

      System.out.println(exemptionDeletionInfo);
      // end-exemptionsAccountDeleteHandler
    } catch (ServiceResponseException e) {
        logger.error(String.format("Service returned status code %s: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()), e);
    }

    try {
      System.out.println("listImageExemptions() result:");
      // begin-listImageExemptions
      ListImageExemptionsOptions listImageExemptionsOptions = new ListImageExemptionsOptions.Builder()
        .resource("image name")
        .build();

      Response<List<Exemption>> response = vulnerabilityAdvisorService.listImageExemptions(listImageExemptionsOptions).execute();
      List<Exemption> listExemption = response.getResult();

      System.out.println(listExemption);
      // end-listImageExemptions
    } catch (ServiceResponseException e) {
        logger.error(String.format("Service returned status code %s: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()), e);
    }

    try {
      System.out.println("listBulkImageExemptions() result:");
      // begin-listBulkImageExemptions
      ListBulkImageExemptionsOptions listBulkImageExemptionsOptions = new ListBulkImageExemptionsOptions.Builder()
        .body(java.util.Arrays.asList("us.icr.io/birds/woodpecker:green", "us.icr.io/birds/grebe:crested"))
        .build();

      Response<Map<String, List<Exemption>>> response = vulnerabilityAdvisorService.listBulkImageExemptions(listBulkImageExemptionsOptions).execute();
      Map<String, List<Exemption>> mapStringListExemption = response.getResult();

      System.out.println(mapStringListExemption);
      // end-listBulkImageExemptions
    } catch (ServiceResponseException e) {
        logger.error(String.format("Service returned status code %s: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()), e);
    }

    try {
      // begin-deleteExemptionAccount
      DeleteExemptionAccountOptions deleteExemptionAccountOptions = new DeleteExemptionAccountOptions.Builder()
        .issueType("cve")
        .issueId("CVE-2023-0001")
        .build();

      Response<Void> response = vulnerabilityAdvisorService.deleteExemptionAccount(deleteExemptionAccountOptions).execute();
      // end-deleteExemptionAccount
      System.out.printf("deleteExemptionAccount() response status code: %d%n", response.getStatusCode());
    } catch (ServiceResponseException e) {
        logger.error(String.format("Service returned status code %s: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()), e);
    }

    try {
      // begin-deleteExemptionResource
      DeleteExemptionResourceOptions deleteExemptionResourceOptions = new DeleteExemptionResourceOptions.Builder()
        .resource("image name")
        .issueType("cve")
        .issueId("CVE-2023-0001")
        .build();

      Response<Void> response = vulnerabilityAdvisorService.deleteExemptionResource(deleteExemptionResourceOptions).execute();
      // end-deleteExemptionResource
      System.out.printf("deleteExemptionResource() response status code: %d%n", response.getStatusCode());
    } catch (ServiceResponseException e) {
        logger.error(String.format("Service returned status code %s: %s%nError details: %s",
          e.getStatusCode(), e.getMessage(), e.getDebuggingInfo()), e);
    }
  }
}
